[
{"name":"org.reactivestreams.Publisher"},
// These array types are due to a change in graal that isn't as actively adding array types anymore
	{"name":"org.springframework.core.io.InputStreamSource[]"},
	{"name":"java.lang.String[]"},
	{"name":"java.io.Serializable[]"},
	{"name":"java.lang.Comparable[]"},
// vanilla-jpa vvv
	{"name":"org.apache.logging.log4j.spi.LoggerContext","allDeclaredMethods":true,"allDeclaredConstructors":true,"allDeclaredFields":true},
	{
		"name": "java.lang.Throwable",
		"allDeclaredFields": true,
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	// vvv vanilla-jpa vvv
    {
		"name": "org.springframework.beans.factory.config.PropertiesFactoryBean",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
    },
	{//superclass of PropertiesFactoryBean
		"name": "org.springframework.core.io.support.PropertiesLoaderSupport",
		"allDeclaredConstructors": true,
 		"allDeclaredMethods": true
	},
	{
		"name": "com.zaxxer.hikari.util.ConcurrentBag$IConcurrentBagEntry[]",
		"allDeclaredConstructors": true
	},

// vanilla-jpa ^^^
// This are related to getting petclinic to work, some need a deeper dive though (e.g. the
// proxy related ones - we need to know if a spring aop proxy will be getting created)
       {
               "name": "org.springframework.boot.SpringApplication",
               "allDeclaredConstructors": true,
               "allDeclaredMethods": true
       },
       {
               "name": "org.apache.logging.log4j.message.ReusableMessageFactory",
               "allDeclaredConstructors": true,
               "allDeclaredMethods": true
       },
       {
               "name": "java.sql.Statement",
               "allDeclaredConstructors": true,
               "allDeclaredMethods": true
       },
       {
               "name": "java.sql.Statement[]",
               "allDeclaredConstructors": true,
               "allDeclaredMethods": true
       },
       {
               "name": "java.util.logging.LogManager",
               "allDeclaredConstructors": true,
               "allDeclaredMethods": true,
               "allDeclaredClasses": true
       },
       {
               "name": "org.springframework.boot.logging.java.JavaLoggingSystem",
               "allDeclaredConstructors": true,
               "allDeclaredMethods": true,
               "allDeclaredClasses": true
       },
        {
                "name": "org.springframework.web.servlet.View",
                "allDeclaredConstructors": true,
                "allDeclaredMethods": true
        },

// END

	{// fixes petclinic removeUnusedAutoconfig - was being added via CassandraReactiveDataAC
	 // need to figure out what should be pulling it in the general case.
		"name": "reactor.core.publisher.Flux",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.thymeleaf.spring5.ISpringTemplateEngine",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.apache.tomcat.websocket.server.WsContextListener",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.web.servlet.view.BeanNameViewResolver",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor",
		"allDeclaredConstructors": true
	},
	{
		"name": "org.apache.tomcat.util.descriptor.web.ErrorPage",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	// These are all Http11NioProtocol and supertypes
	{
		"name": "org.apache.coyote.http11.Http11NioProtocol",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.apache.coyote.http11.AbstractHttp11JsseProtocol",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.apache.coyote.http11.AbstractHttp11Protocol",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.apache.coyote.AbstractProtocol",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.apache.coyote.ProtocolHandler",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	// These are from OnWebApplicationCondition:
	{
		"name": "org.springframework.web.context.ConfigurableWebApplicationContext",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.web.context.WebApplicationContext",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.context.ConfigurableApplicationContext",
		"allDeclaredConstructors": true
		//"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory$StaticResourceConfigurer",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory$LoaderHidingResourceRoot",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	// ^^^ for tomcat sample
	{
		"name": "org.springframework.boot.context.properties.ConfigurationPropertiesBinder",
		"allDeclaredConstructors": true
	},
	{
		"name": "org.springframework.boot.context.properties.ConfigurationPropertiesBinder$Factory",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.context.properties.ConfigurationPropertiesBeanDefinitionValidator",
		"allDeclaredConstructors": true
		//"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.context.support.PropertySourcesPlaceholderConfigurer",
		"allDeclaredConstructors": true
	//	"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.context.event.DefaultEventListenerFactory",
		"methods": [
			{
				"name": "<init>",
				"parameterTypes": [
				]
			}
		]
	},
	{
		"name": "org.springframework.boot.context.properties.ConfigurationProperties",
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.context.TypeExcludeFilter",
		"allDeclaredConstructors": true
	},
	{
		"name": "org.springframework.boot.CommandLineRunner",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.SpringBootConfiguration",
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.autoconfigure.SpringBootApplication",
		"allDeclaredConstructors": true,
		"allDeclaredFields": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.beans.factory.xml.XmlBeanDefinitionReader",
		"allDeclaredConstructors": true
	},
	{
		"name": "org.springframework.web.reactive.config.EnableWebFlux",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.autoconfigure.EnableAutoConfiguration",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.context.event.EventListenerMethodProcessor",
		"allDeclaredConstructors": true
	},
	{
		"name": "org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessorRegistrar",
		"allDeclaredConstructors": true
	},
	{
		"name": "org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor",
		"allDeclaredConstructors": true
	},
	{
		"name": "org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar",
		"allDeclaredConstructors": true
		//"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.context.annotation.ComponentScan$Filter",
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.http.converter.FormHttpMessageConverter",
		"allDeclaredConstructors": true,
		"allDeclaredFields": true,
		// NPE: org.springframework.boot.autoconfigure.http.HttpMessageConverters.extractPartConverters(HttpMessageConverters.java:162)
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.web.bind.annotation.RequestParam",
		"allDeclaredConstructors": true,
		"allDeclaredFields": true,
		// Method [public abstract java.lang.String org.springframework.web.bind.annotation.RequestParam.name()] is unsupported for synthesized annotation type [interface org.springframework.web.bind.annotation.RequestParam]
		"allDeclaredMethods": true
	},
	{
		"name": "org.thymeleaf.spring5.view.reactive.ThymeleafReactiveView",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.thymeleaf.spring5.expression.Mvc$NonSpring41MvcUriComponentsBuilderDelegate",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.thymeleaf.standard.expression.AdditionExpression",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	// ends here...
	// vanilla-tx vvv
//	{
//		"name": "com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl",
//		"allDeclaredConstructors": true,
//		"allDeclaredMethods": true
//	},
	{
		"name": "org.springframework.jdbc.support.SQLErrorCodes",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.transaction.TransactionDefinition",
		"allDeclaredConstructors": true,
		"allDeclaredFields": true,
		"allDeclaredMethods": true
	},
	// vanilla-tx ^^^
	{
		"name": "org.springframework.validation.beanvalidation.MethodValidationPostProcessor",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.web.reactive.HandlerResult",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor",
		"allDeclaredConstructors": true
	},
	{
		"name": "org.springframework.context.annotation.AnnotationScopeMetadataResolver",
		"allDeclaredConstructors": true
	},
	{
		"name": "org.springframework.boot.autoconfigure.AutoConfigurationPackages$BasePackages",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.autoconfigure.http.HttpMessageConverters",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "io.netty.channel.socket.nio.NioServerSocketChannel",
		"methods": [
			{
				"name": "<init>",
				"parameterTypes": [
				]
			}
		]
	},
	{
		"name": "io.netty.channel.socket.nio.NioSocketChannel",
		"methods": [
			{
				"name": "<init>",
				"parameterTypes": [
				]
			}
		]
	},
	{
		"name": "org.springframework.boot.autoconfigure.AutoConfigurationExcludeFilter",
		"allDeclaredConstructors": true
	},
	{
		"name": "org.springframework.http.codec.ClientCodecConfigurer",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.http.codec.ServerCodecConfigurer",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$PreFlightAmbiguousMatchHandler",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.autoconfigure.condition.BeanTypeRegistry",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.h2.Driver",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	// These from DefaultIdentifierGeneratorFactory
	{
		"name": "app.main.model.Foo",
		"allDeclaredConstructors": true,
		"allDeclaredFields": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.data.jpa.repository.config.EnableJpaRepositories",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.autoconfigure.orm.jpa.DataSourceInitializedPublisher",
		"allDeclaredConstructors": true,
		"allDeclaredFields": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.hibernate.jpa.HibernateEntityManager",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	// vvv vanilla-jpa
	{
		// this one shouldn't be needed (it's a superclass of the one below, which is what the bean definition actually is made of)
		"name": "org.springframework.data.repository.core.support.TransactionalRepositoryFactoryBeanSupport",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		// this one shouldn't be needed (it's a superclass of the one below, which is what the bean definition actually is made of)
		"name": "org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "javax.persistence.GeneratedValue",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "javax.persistence.Id",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.data.jpa.repository.support.JpaEvaluationContextExtension",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	// ^^^ vanilla-jpa
	{
		"name": "java.lang.annotation.Repeatable",
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer$SharedMetadataReaderFactoryBean",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	},
	{
		"name": "org.springframework.context.support.GenericApplicationContext",
		"methods": [
			{
				"name": "<init>",
				"parameterTypes": [
				]
			}
		]
	},
	{
	// DelegatingWebFluxConfiguration (used by webfluxconfigurationsupport)
		"name": "com.sun.xml.internal.stream.XMLInputFactoryImpl",
		"allDeclaredConstructors": true,
		"allDeclaredMethods": true
	}
]